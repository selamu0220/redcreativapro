"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_ai_ts";
exports.ids = ["_ssr_src_lib_ai_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/ai.ts":
/*!***********************!*\
  !*** ./src/lib/ai.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enhanceSearchWithAI: () => (/* binding */ enhanceSearchWithAI),\n/* harmony export */   generateScriptWithAI: () => (/* binding */ generateScriptWithAI)\n/* harmony export */ });\nasync function generateScriptWithAI(prompt, provider, apiKey, model, temperature, maxTokens, baseUrl) {\n    // Get stored AI settings if not provided\n    if (!apiKey || !provider) {\n        const storedSettings = localStorage.getItem('aiSettings');\n        if (storedSettings) {\n            const settings = JSON.parse(storedSettings);\n            provider = provider || settings.provider;\n            apiKey = apiKey || settings.apiKey;\n            model = model || settings.model;\n            temperature = temperature ?? settings.temperature;\n            maxTokens = maxTokens ?? settings.maxTokens;\n            baseUrl = baseUrl || settings.baseUrl;\n        }\n    }\n    if (!provider) {\n        throw new Error('Se requiere seleccionar un proveedor de IA. Por favor configura tus ajustes de IA en el menú de usuario.');\n    }\n    if (!apiKey) {\n        throw new Error('Se requiere una API key. Por favor configura tus ajustes de IA en el menú de usuario.');\n    }\n    // Validate API key format before making request\n    if (typeof apiKey !== 'string' || !apiKey.trim()) {\n        localStorage.removeItem('aiSettings'); // Clear invalid settings\n        throw new Error('API key inválida. Por favor verifica que hayas ingresado una API key válida en los ajustes de usuario.');\n    }\n    // Trim the API key to prevent whitespace issues\n    apiKey = apiKey.trim();\n    try {\n        switch(provider){\n            case 'gemini':\n                {\n                    // Default to gemini-2.0-flash if no model specified\n                    const selectedModel = model || 'gemini-2.0-flash';\n                    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${selectedModel}:generateContent?key=${apiKey}`, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            contents: [\n                                {\n                                    parts: [\n                                        {\n                                            text: prompt\n                                        }\n                                    ]\n                                }\n                            ],\n                            generationConfig: {\n                                temperature: temperature || 0.7,\n                                maxOutputTokens: maxTokens || 2048\n                            }\n                        })\n                    });\n                    if (!response.ok) {\n                        const error = await response.json().catch(()=>({\n                                error: {\n                                    message: 'Error desconocido'\n                                }\n                            }));\n                        if (response.status === 401) {\n                            localStorage.removeItem('aiSettings'); // Clear invalid settings\n                            throw new Error(`La API key de Google AI Studio no es válida para el modelo ${selectedModel}. Por favor, verifica que la API key tenga los permisos necesarios.`);\n                        }\n                        throw new Error(`Error de Gemini: ${error.error?.message || 'No se pudo generar el contenido'}`);\n                    }\n                    const data = await response.json();\n                    if (!data.candidates?.[0]?.content?.parts?.[0]?.text) {\n                        throw new Error('No se recibió una respuesta válida del servicio de IA');\n                    }\n                    return data.candidates[0].content.parts[0].text;\n                }\n            case 'openai':\n                {\n                    const selectedModel = model || 'gpt-4o';\n                    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${apiKey}`\n                        },\n                        body: JSON.stringify({\n                            model: selectedModel,\n                            messages: [\n                                {\n                                    role: 'user',\n                                    content: prompt\n                                }\n                            ],\n                            temperature: temperature || 0.7,\n                            max_tokens: maxTokens || 2048\n                        })\n                    });\n                    if (!openaiResponse.ok) {\n                        const error = await openaiResponse.json().catch(()=>({\n                                error: {\n                                    message: 'Error desconocido'\n                                }\n                            }));\n                        if (openaiResponse.status === 401) {\n                            localStorage.removeItem('aiSettings');\n                            throw new Error('API key inválida. Por favor verifica tu API key de OpenAI en los ajustes de usuario.');\n                        }\n                        throw new Error(`Error de OpenAI: ${error.error?.message || 'No se pudo generar el contenido'}`);\n                    }\n                    const openaiData = await openaiResponse.json();\n                    return openaiData.choices[0].message.content;\n                }\n            case 'anthropic':\n                {\n                    const selectedModel = model || 'claude-3-5-sonnet-20241022';\n                    const anthropicResponse = await fetch('https://api.anthropic.com/v1/messages', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'x-api-key': apiKey,\n                            'anthropic-version': '2023-06-01'\n                        },\n                        body: JSON.stringify({\n                            model: selectedModel,\n                            messages: [\n                                {\n                                    role: 'user',\n                                    content: prompt\n                                }\n                            ],\n                            max_tokens: maxTokens || 2048,\n                            temperature: temperature || 0.7\n                        })\n                    });\n                    if (!anthropicResponse.ok) {\n                        const error = await anthropicResponse.json().catch(()=>({\n                                error: {\n                                    message: 'Error desconocido'\n                                }\n                            }));\n                        if (anthropicResponse.status === 401) {\n                            localStorage.removeItem('aiSettings');\n                            throw new Error('API key inválida. Por favor verifica tu API key de Anthropic en los ajustes de usuario.');\n                        }\n                        throw new Error(`Error de Anthropic: ${error.error?.message || 'No se pudo generar el contenido'}`);\n                    }\n                    const anthropicData = await anthropicResponse.json();\n                    return anthropicData.content[0].text;\n                }\n            case 'cohere':\n                {\n                    const selectedModel = model || 'command-r-plus';\n                    const apiUrl = baseUrl || 'https://api.cohere.ai/v1/generate';\n                    const cohereResponse = await fetch(apiUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${apiKey}`\n                        },\n                        body: JSON.stringify({\n                            model: selectedModel,\n                            prompt: prompt,\n                            max_tokens: maxTokens || 2048,\n                            temperature: temperature || 0.7\n                        })\n                    });\n                    if (!cohereResponse.ok) {\n                        const error = await cohereResponse.json().catch(()=>({\n                                message: 'Error desconocido'\n                            }));\n                        if (cohereResponse.status === 401) {\n                            localStorage.removeItem('aiSettings');\n                            throw new Error('API key inválida. Por favor verifica tu API key de Cohere en los ajustes de usuario.');\n                        }\n                        throw new Error(`Error de Cohere: ${error.message || 'No se pudo generar el contenido'}`);\n                    }\n                    const cohereData = await cohereResponse.json();\n                    return cohereData.generations[0].text;\n                }\n            case 'mistral':\n                {\n                    const selectedModel = model || 'mistral-large-latest';\n                    const apiUrl = baseUrl || 'https://api.mistral.ai/v1/chat/completions';\n                    const mistralResponse = await fetch(apiUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${apiKey}`\n                        },\n                        body: JSON.stringify({\n                            model: selectedModel,\n                            messages: [\n                                {\n                                    role: 'user',\n                                    content: prompt\n                                }\n                            ],\n                            max_tokens: maxTokens || 2048,\n                            temperature: temperature || 0.7\n                        })\n                    });\n                    if (!mistralResponse.ok) {\n                        const error = await mistralResponse.json().catch(()=>({\n                                error: {\n                                    message: 'Error desconocido'\n                                }\n                            }));\n                        if (mistralResponse.status === 401) {\n                            localStorage.removeItem('aiSettings');\n                            throw new Error('API key inválida. Por favor verifica tu API key de Mistral en los ajustes de usuario.');\n                        }\n                        throw new Error(`Error de Mistral: ${error.error?.message || 'No se pudo generar el contenido'}`);\n                    }\n                    const mistralData = await mistralResponse.json();\n                    return mistralData.choices[0].message.content;\n                }\n            default:\n                throw new Error('Proveedor de IA no soportado');\n        }\n    } catch (error) {\n        console.error('Error en generateScriptWithAI:', error);\n        if (error.message.includes('API key')) {\n            throw error;\n        }\n        throw new Error(`Error al conectar con el servicio de IA: ${error.message}. Por favor verifica tu API key e inténtalo de nuevo.`);\n    }\n}\nasync function enhanceSearchWithAI(query) {\n    try {\n        const storedSettings = localStorage.getItem('aiSettings');\n        if (!storedSettings) {\n            throw new Error('Para obtener sugerencias de IA, configura tus ajustes en el menú de usuario (ícono de perfil → Ajustes)');\n        }\n        const settings = JSON.parse(storedSettings);\n        const { provider, apiKey, model } = settings;\n        if (!provider || !apiKey) {\n            throw new Error('Para obtener sugerencias de IA, configura el proveedor y API key en el menú de usuario (ícono de perfil → Ajustes)');\n        }\n        const prompt = `Analiza esta búsqueda: \"${query}\"\n    1. Extrae conceptos clave y términos relacionados\n    2. Identifica sinónimos y temas relacionados\n    3. Devuelve una lista de términos relevantes para la búsqueda\n    Formato: lista de términos separados por comas, máximo 5 términos.\n    Respuesta en español.`;\n        const response = await generateScriptWithAI(prompt, provider, apiKey, model);\n        const terms = response.split(',').map((term)=>term.trim()).filter(Boolean).slice(0, 5);\n        if (terms.length === 0) {\n            throw new Error('No se pudieron generar sugerencias para esta búsqueda');\n        }\n        return terms;\n    } catch (error) {\n        console.error('Error al mejorar la búsqueda:', error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/ai.ts\n");

/***/ })

};
;