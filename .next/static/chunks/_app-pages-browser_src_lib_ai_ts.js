"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_ai_ts"],{

/***/ "(app-pages-browser)/./src/lib/ai.ts":
/*!***********************!*\
  !*** ./src/lib/ai.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enhanceSearchWithAI: () => (/* binding */ enhanceSearchWithAI),\n/* harmony export */   generateScriptWithAI: () => (/* binding */ generateScriptWithAI)\n/* harmony export */ });\nasync function generateScriptWithAI(prompt, provider, apiKey, model, temperature, maxTokens, baseUrl) {\n    // Get stored AI settings if not provided\n    if (!apiKey || !provider) {\n        const storedSettings = localStorage.getItem('aiSettings');\n        if (storedSettings) {\n            const settings = JSON.parse(storedSettings);\n            provider = provider || settings.provider;\n            apiKey = apiKey || settings.apiKey;\n            model = model || settings.model;\n            temperature = temperature !== null && temperature !== void 0 ? temperature : settings.temperature;\n            maxTokens = maxTokens !== null && maxTokens !== void 0 ? maxTokens : settings.maxTokens;\n            baseUrl = baseUrl || settings.baseUrl;\n        }\n    }\n    if (!provider) {\n        throw new Error('Se requiere seleccionar un proveedor de IA. Por favor configura tus ajustes de IA en el menú de usuario.');\n    }\n    if (!apiKey) {\n        throw new Error('Se requiere una API key. Por favor configura tus ajustes de IA en el menú de usuario.');\n    }\n    // Validate API key format before making request\n    if (typeof apiKey !== 'string' || !apiKey.trim()) {\n        localStorage.removeItem('aiSettings'); // Clear invalid settings\n        throw new Error('API key inválida. Por favor verifica que hayas ingresado una API key válida en los ajustes de usuario.');\n    }\n    // Trim the API key to prevent whitespace issues\n    apiKey = apiKey.trim();\n    try {\n        switch(provider){\n            case 'gemini':\n                {\n                    var _data_candidates__content_parts_, _data_candidates__content_parts, _data_candidates__content, _data_candidates_, _data_candidates;\n                    // Default to gemini-2.0-flash if no model specified\n                    const selectedModel = model || 'gemini-2.0-flash';\n                    const response = await fetch(\"https://generativelanguage.googleapis.com/v1beta/models/\".concat(selectedModel, \":generateContent?key=\").concat(apiKey), {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            contents: [\n                                {\n                                    parts: [\n                                        {\n                                            text: prompt\n                                        }\n                                    ]\n                                }\n                            ],\n                            generationConfig: {\n                                temperature: temperature || 0.7,\n                                maxOutputTokens: maxTokens || 2048\n                            }\n                        })\n                    });\n                    if (!response.ok) {\n                        var _error_error;\n                        const error = await response.json().catch(()=>({\n                                error: {\n                                    message: 'Error desconocido'\n                                }\n                            }));\n                        if (response.status === 401) {\n                            localStorage.removeItem('aiSettings'); // Clear invalid settings\n                            throw new Error(\"La API key de Google AI Studio no es v\\xe1lida para el modelo \".concat(selectedModel, \". Por favor, verifica que la API key tenga los permisos necesarios.\"));\n                        }\n                        throw new Error(\"Error de Gemini: \".concat(((_error_error = error.error) === null || _error_error === void 0 ? void 0 : _error_error.message) || 'No se pudo generar el contenido'));\n                    }\n                    const data = await response.json();\n                    if (!((_data_candidates = data.candidates) === null || _data_candidates === void 0 ? void 0 : (_data_candidates_ = _data_candidates[0]) === null || _data_candidates_ === void 0 ? void 0 : (_data_candidates__content = _data_candidates_.content) === null || _data_candidates__content === void 0 ? void 0 : (_data_candidates__content_parts = _data_candidates__content.parts) === null || _data_candidates__content_parts === void 0 ? void 0 : (_data_candidates__content_parts_ = _data_candidates__content_parts[0]) === null || _data_candidates__content_parts_ === void 0 ? void 0 : _data_candidates__content_parts_.text)) {\n                        throw new Error('No se recibió una respuesta válida del servicio de IA');\n                    }\n                    return data.candidates[0].content.parts[0].text;\n                }\n            case 'openai':\n                {\n                    const selectedModel = model || 'gpt-4o';\n                    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': \"Bearer \".concat(apiKey)\n                        },\n                        body: JSON.stringify({\n                            model: selectedModel,\n                            messages: [\n                                {\n                                    role: 'user',\n                                    content: prompt\n                                }\n                            ],\n                            temperature: temperature || 0.7,\n                            max_tokens: maxTokens || 2048\n                        })\n                    });\n                    if (!openaiResponse.ok) {\n                        var _error_error1;\n                        const error = await openaiResponse.json().catch(()=>({\n                                error: {\n                                    message: 'Error desconocido'\n                                }\n                            }));\n                        if (openaiResponse.status === 401) {\n                            localStorage.removeItem('aiSettings');\n                            throw new Error('API key inválida. Por favor verifica tu API key de OpenAI en los ajustes de usuario.');\n                        }\n                        throw new Error(\"Error de OpenAI: \".concat(((_error_error1 = error.error) === null || _error_error1 === void 0 ? void 0 : _error_error1.message) || 'No se pudo generar el contenido'));\n                    }\n                    const openaiData = await openaiResponse.json();\n                    return openaiData.choices[0].message.content;\n                }\n            case 'anthropic':\n                {\n                    const selectedModel = model || 'claude-3-5-sonnet-20241022';\n                    const anthropicResponse = await fetch('https://api.anthropic.com/v1/messages', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'x-api-key': apiKey,\n                            'anthropic-version': '2023-06-01'\n                        },\n                        body: JSON.stringify({\n                            model: selectedModel,\n                            messages: [\n                                {\n                                    role: 'user',\n                                    content: prompt\n                                }\n                            ],\n                            max_tokens: maxTokens || 2048,\n                            temperature: temperature || 0.7\n                        })\n                    });\n                    if (!anthropicResponse.ok) {\n                        var _error_error2;\n                        const error = await anthropicResponse.json().catch(()=>({\n                                error: {\n                                    message: 'Error desconocido'\n                                }\n                            }));\n                        if (anthropicResponse.status === 401) {\n                            localStorage.removeItem('aiSettings');\n                            throw new Error('API key inválida. Por favor verifica tu API key de Anthropic en los ajustes de usuario.');\n                        }\n                        throw new Error(\"Error de Anthropic: \".concat(((_error_error2 = error.error) === null || _error_error2 === void 0 ? void 0 : _error_error2.message) || 'No se pudo generar el contenido'));\n                    }\n                    const anthropicData = await anthropicResponse.json();\n                    return anthropicData.content[0].text;\n                }\n            case 'cohere':\n                {\n                    const selectedModel = model || 'command-r-plus';\n                    const apiUrl = baseUrl || 'https://api.cohere.ai/v1/generate';\n                    const cohereResponse = await fetch(apiUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': \"Bearer \".concat(apiKey)\n                        },\n                        body: JSON.stringify({\n                            model: selectedModel,\n                            prompt: prompt,\n                            max_tokens: maxTokens || 2048,\n                            temperature: temperature || 0.7\n                        })\n                    });\n                    if (!cohereResponse.ok) {\n                        const error = await cohereResponse.json().catch(()=>({\n                                message: 'Error desconocido'\n                            }));\n                        if (cohereResponse.status === 401) {\n                            localStorage.removeItem('aiSettings');\n                            throw new Error('API key inválida. Por favor verifica tu API key de Cohere en los ajustes de usuario.');\n                        }\n                        throw new Error(\"Error de Cohere: \".concat(error.message || 'No se pudo generar el contenido'));\n                    }\n                    const cohereData = await cohereResponse.json();\n                    return cohereData.generations[0].text;\n                }\n            case 'mistral':\n                {\n                    const selectedModel = model || 'mistral-large-latest';\n                    const apiUrl = baseUrl || 'https://api.mistral.ai/v1/chat/completions';\n                    const mistralResponse = await fetch(apiUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': \"Bearer \".concat(apiKey)\n                        },\n                        body: JSON.stringify({\n                            model: selectedModel,\n                            messages: [\n                                {\n                                    role: 'user',\n                                    content: prompt\n                                }\n                            ],\n                            max_tokens: maxTokens || 2048,\n                            temperature: temperature || 0.7\n                        })\n                    });\n                    if (!mistralResponse.ok) {\n                        var _error_error3;\n                        const error = await mistralResponse.json().catch(()=>({\n                                error: {\n                                    message: 'Error desconocido'\n                                }\n                            }));\n                        if (mistralResponse.status === 401) {\n                            localStorage.removeItem('aiSettings');\n                            throw new Error('API key inválida. Por favor verifica tu API key de Mistral en los ajustes de usuario.');\n                        }\n                        throw new Error(\"Error de Mistral: \".concat(((_error_error3 = error.error) === null || _error_error3 === void 0 ? void 0 : _error_error3.message) || 'No se pudo generar el contenido'));\n                    }\n                    const mistralData = await mistralResponse.json();\n                    return mistralData.choices[0].message.content;\n                }\n            default:\n                throw new Error('Proveedor de IA no soportado');\n        }\n    } catch (error) {\n        console.error('Error en generateScriptWithAI:', error);\n        if (error.message.includes('API key')) {\n            throw error;\n        }\n        throw new Error(\"Error al conectar con el servicio de IA: \".concat(error.message, \". Por favor verifica tu API key e int\\xe9ntalo de nuevo.\"));\n    }\n}\nasync function enhanceSearchWithAI(query) {\n    try {\n        const storedSettings = localStorage.getItem('aiSettings');\n        if (!storedSettings) {\n            throw new Error('Para obtener sugerencias de IA, configura tus ajustes en el menú de usuario (ícono de perfil → Ajustes)');\n        }\n        const settings = JSON.parse(storedSettings);\n        const { provider, apiKey, model } = settings;\n        if (!provider || !apiKey) {\n            throw new Error('Para obtener sugerencias de IA, configura el proveedor y API key en el menú de usuario (ícono de perfil → Ajustes)');\n        }\n        const prompt = 'Analiza esta b\\xfasqueda: \"'.concat(query, '\"\\n    1. Extrae conceptos clave y t\\xe9rminos relacionados\\n    2. Identifica sin\\xf3nimos y temas relacionados\\n    3. Devuelve una lista de t\\xe9rminos relevantes para la b\\xfasqueda\\n    Formato: lista de t\\xe9rminos separados por comas, m\\xe1ximo 5 t\\xe9rminos.\\n    Respuesta en espa\\xf1ol.');\n        const response = await generateScriptWithAI(prompt, provider, apiKey, model);\n        const terms = response.split(',').map((term)=>term.trim()).filter(Boolean).slice(0, 5);\n        if (terms.length === 0) {\n            throw new Error('No se pudieron generar sugerencias para esta búsqueda');\n        }\n        return terms;\n    } catch (error) {\n        console.error('Error al mejorar la búsqueda:', error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/ai.ts\n"));

/***/ })

}]);